{"version":3,"sources":["webpack:///./src/sounds/dark.ogg","webpack:///./src/weights/tiny_face_detector_model.weights","webpack:///./src/meshes/sign.js","webpack:///./src/meshes/walls.js","webpack:///./src/scenes/index.js","webpack:///./src/scenes/level1.js","webpack:///./src/index.js"],"names":["module","exports","__webpack_require__","p","Sign","ui","_this","_classCallCheck","this","supportGeometry","geometry","BoxGeometry","faces","forEach","face","i","color","offsetHSL","Math","random","copy","translate","BufferGeometry","fromGeometry","supportMaterial","MeshBasicMaterial","vertexColors","VertexColors","_possibleConstructorReturn","_getPrototypeOf","call","panel","UI","position","y","support","Mesh","add","intersects","Object3D","Walls","walls_classCallCheck","Color","walls_possibleConstructorReturn","walls_getPrototypeOf","generator","_ref","x","z","bump","size","setHex","r","g","b","scale","set","multiply","Voxels","scenes","path","scene","Level1","args","_this$intersects","level1_classCallCheck","level1_possibleConstructorReturn","level1_getPrototypeOf","engine","setAmbientSounds","DarkAmbient","setBackgroundColor","camera","fov","updateProjectionMatrix","lookAt","room","walls","platform","light","floor","texture","voxelsTexture","push","width","height","_ref2","_floor$position","Floor","apply","_toConsumableArray","material","visible","sign","buttons","label","onPointer","graphics","_ref3","ctx","l","fillStyle","concat","beginPath","arc","PI","fill","styles","button","background","displays","distance","_loop","pivot","display","s","stepY","onBeforeRender","_ref4","time","animation","rotation","sin","yaw","pitch","cos","sort","displayIndex","video","document","createElement","options","TinyFaceDetectorOptions","onloadedmetadata","detectFace","detectSingleFace","then","result","box","length","sx","max","sy","sw","min","videoHeight","sh","w","renderer","h","context","drawImage","fillRect","needsUpdate","timeout","setTimeout","fetchNetWeights","TinyFaceDetectorModel","model","nets","tinyFaceDetector","load","navigator","mediaDevices","getUserMedia","audio","stream","srcObject","play","Scene","_get","prototype","getTracks","track","stop","clearTimeout","VREngine","basename","__BASENAME__","mount","getElementById"],"mappings":"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","file":"code/main.9fcfcb6404d87d6c391c.js","sourcesContent":["module.exports = __webpack_public_path__ + \"assets/4ba312eae62dae3b218b93b9b0ed4b21.ogg\";","module.exports = __webpack_public_path__ + \"assets/93127487a737311625b8f17799c01111.weights\";","import {\n  BoxGeometry,\n  BufferGeometry,\n  Mesh,\n  MeshBasicMaterial,\n  Object3D,\n  VertexColors,\n} from 'three';\nimport { UI } from 'vrengine';\n\nclass Sign extends Object3D {\n  constructor(ui) {\n    if (!Sign.supportGeometry) {\n      const geometry = new BoxGeometry(0.1, 2, 0.05, 1, 1, 1);\n      geometry.faces.forEach((face, i) => {\n        if (i % 2 === 1) {\n          face.color.offsetHSL(0, 0, Math.random() * -0.1);\n          geometry.faces[i - 1].color.copy(face.color);\n        }\n      });\n      geometry.translate(0, 0.3, 0);\n      Sign.supportGeometry = (new BufferGeometry()).fromGeometry(geometry);\n    }\n    if (!Sign.supportMaterial) {\n      Sign.supportMaterial = new MeshBasicMaterial({\n        color: 0x333333,\n        vertexColors: VertexColors,\n      });\n    }\n    super();\n    const panel = new UI(ui);\n    panel.position.y += 1.48;\n    const support = new Mesh(\n      Sign.supportGeometry,\n      Sign.supportMaterial\n    );\n    this.add(panel);\n    this.add(support);\n    this.intersects = [panel, support];\n  }\n}\n\nexport default Sign;\n","import { Color } from 'three';\nimport { Voxels } from 'vrengine';\n\nclass Walls extends Voxels {\n  constructor() {\n    const size = 32;\n    const radius = size * 0.5;\n    const color = new Color();\n    super({\n      generator: ({ x, y, z }) => {\n        const bump = Math.random() >= 0.5;\n        if (\n          x === 0\n          || (x === 1 && bump)\n          || x === size - 1\n          || (x === size - 2 && bump)\n          || z === 0\n          || (z === 1 && bump)\n          || z === size - 1\n          || (z === size - 2 && bump)\n          || y === size - 1\n        ) {\n          color\n            .setHex(0x333333)\n            .offsetHSL(\n              Math.random() * 0.2 - 0.2,\n              Math.random() * 0.2 - 0.2,\n              Math.random() * 0.2 - 0.2\n            );\n          return (\n            (0x01 << 24)\n            | (((color.r * 0xFF) & 0xFF) << 16)\n            | (((color.g * 0xFF) & 0xFF) << 8)\n            | ((color.b * 0xFF) & 0xFF)\n          );\n        }\n        return 0x00;\n      },\n      size,\n    });\n    this.scale.set(5, 10, 5);\n    this.position.set(-radius, -radius, -radius).multiply(this.scale);\n  }\n}\n\nexport default Walls;\n","import Level1 from './level1';\n\nexport default [\n  {\n    path: '/',\n    scene: Level1,\n  },\n];\n","import {\n  detectSingleFace,\n  nets,\n  fetchNetWeights,\n  TinyFaceDetectorOptions,\n} from 'face-api.js';\nimport { Object3D } from 'three';\nimport {\n  Scene,\n  Floor,\n  Voxels,\n  UI,\n} from 'vrengine';\nimport { Sign, Walls } from '@/meshes';\nimport TinyFaceDetectorModel from '@/weights/tiny_face_detector_model.weights';\nimport DarkAmbient from '@/sounds/dark.ogg';\n\nclass Level1 extends Scene {\n  constructor(args) {\n    super(args);\n    const { engine } = args;\n\n    engine.setAmbientSounds([DarkAmbient]);\n    engine.setBackgroundColor(0x101020);\n\n    engine.camera.fov = 75;\n    engine.camera.updateProjectionMatrix();\n    engine.camera.lookAt(0, 1.8275, -1);\n    engine.camera.room.position.set(0, 0.5, -1);\n    // engine.camera.debug.active = true;\n\n    // Spawn some huge walls\n    const walls = new Walls();\n    this.add(walls);\n\n    // Spawn a platform\n    {\n      const size = 16;\n      const platform = new Voxels({\n        generator: ({ x, y, z }) => {\n          if (\n            y === 0\n            || (\n              (\n                x >= 7 && x <= 8\n              )\n              && (\n                (\n                  y < 3 && z >= 6 && z <= 7\n                )\n                || (\n                  y < 2 && z >= 8 && z <= 9\n                )\n              )\n            )\n          ) {\n            const light = (1 - Math.random() * 0.6) * 0x1A;\n            return (\n              (0x03 << 24)\n              | (Math.floor(light * 0.5) << 16)\n              | (Math.floor(light * 0.5) << 8)\n              | light\n            );\n          }\n          return 0x00;\n        },\n        size,\n        texture: this.voxelsTexture,\n      });\n      platform.scale.set(1, 0.5, 1);\n      platform.position.set(size * -0.5, -1, size * -0.5);\n      this.add(platform);\n      this.intersects.push(platform);\n\n      [\n        {\n          position: [0, -0.5, 0],\n          width: size,\n          height: size,\n        },\n        {\n          position: [0, 0, 1],\n          width: 2,\n          height: 2,\n        },\n        {\n          position: [0, 0.5, -1],\n          width: 2,\n          height: 2,\n        },\n      ].forEach(({ position, width, height }) => {\n        const floor = new Floor({\n          width,\n          height,\n        });\n        floor.position.set(...position);\n        floor.material.visible = false;\n        floor.position.y += 0.001;\n        this.add(floor);\n        this.intersects.push(floor);\n      });\n    }\n\n    // Spawn a sign\n    const sign = new Sign({\n      buttons: [\n        {\n          label: 'Big brotha',\n          x: 128 - 110,\n          y: 128 - 25,\n          width: 220,\n          height: 50,\n          onPointer: () => {},\n        },\n      ],\n      graphics: [\n        ({ ctx }) => {\n          for (let i = 0; i < 128; i += 1) {\n            const x = Math.random() * 256;\n            const y = Math.random() * 256;\n            const l = (Math.random() * 0.3 + 0.5) * 0x100;\n            ctx.fillStyle = `rgba(${l}, ${l}, ${l}, .5)`;\n            ctx.beginPath();\n            ctx.arc(x, y, Math.random() * 5 + 1, 0, Math.PI * 2);\n            ctx.fill();\n          }\n        },\n      ],\n      styles: {\n        button: {\n          background: '#393',\n        },\n      },\n    });\n    sign.position.set(2.5, -0.25, -2.5);\n    sign.lookAt(0, 1.25, 0);\n    this.add(sign);\n    this.intersects.push(...sign.intersects);\n\n    // Spawn a bunch of screens\n    const displays = [];\n    for (let y = 0; y < 6; y += 1) {\n      const distance = 7 + y * 0.5;\n      for (let x = 0; x < 10; x += 1) {\n        const pivot = new Object3D();\n        const display = new UI({\n          width: 1,\n          height: 1,\n        });\n        const s = 0.8 + Math.random() * 0.15;\n        display.scale.set(s, s, s);\n        displays.push(display);\n        const stepY = Math.random() + 0.5;\n        display.onBeforeRender = ({ animation: { time } }) => {\n          display.rotation.y = Math.sin(time * stepY) * 0.25;\n        };\n        pivot.add(display);\n        const yaw = Math.PI + ((x - 4.5) / 11) * Math.PI * 0.5;\n        const pitch = ((y + 1.5) / 7) * Math.PI * 0.25;\n        pivot.position.set(\n          distance * Math.sin(yaw) * Math.cos(pitch),\n          distance * Math.sin(pitch),\n          distance * Math.cos(yaw) * Math.cos(pitch)\n        );\n        pivot.lookAt(0, 3, 0);\n        this.add(pivot);\n      }\n    }\n    displays.sort(() => Math.random() - 0.5);\n\n    let displayIndex = 0;\n    const video = document.createElement('video');\n    const options = new TinyFaceDetectorOptions();\n    const detectFace = () => {\n      detectSingleFace(video, options)\n        .then((result) => {\n          if (result) {\n            const { box } = result;\n            const display = displays[displayIndex];\n            displayIndex += 1;\n            if (displayIndex >= displays.length) {\n              displays.sort(() => Math.random() - 0.5);\n              displayIndex = 0;\n            }\n            const sx = Math.max(box.x - box.width * 0.25, 0);\n            const sy = Math.max(box.y - box.height * 0.25, 0);\n            const sw = Math.min(box.width * 1.5, video.videoHeight - sx);\n            const sh = Math.min(box.height * 1.5, video.videoHeight - sy);\n            let x = 0;\n            let y = 0;\n            let w = display.renderer.width;\n            let h = display.renderer.height;\n            if (sw < sh) {\n              h = sh * w / sw;\n              y = display.renderer.height * 0.5 - h * 0.5;\n            } else {\n              w = sw * h / sh;\n              x = display.renderer.width * 0.5 - w * 0.5;\n            }\n            display.context.drawImage(\n              video,\n              sx, sy, sw, sh,\n              x, y, w, h\n            );\n            display.context.fillStyle = 'rgba(16, 16, 32, 0.5)';\n            display.context.fillRect(0, 0, display.renderer.width, display.renderer.height);\n            display.texture.needsUpdate = true;\n          }\n          this.timeout = setTimeout(detectFace);\n        });\n    };\n    video.onloadedmetadata = detectFace;\n\n    fetchNetWeights(TinyFaceDetectorModel)\n      .then((model) => {\n        nets.tinyFaceDetector.load(model).then(() => {\n          navigator.mediaDevices.getUserMedia({ video: true, audio: false })\n            .then((stream) => {\n              video.srcObject = stream;\n              video.play();\n              this.stream = stream;\n            });\n        });\n      });\n  }\n\n  dispose() {\n    super.dispose();\n    if (this.stream) {\n      this.stream.getTracks().forEach(track => (\n        track.stop()\n      ));\n    }\n    clearTimeout(this.timeout);\n  }\n}\n\nexport default Level1;\n","import VREngine from 'vrengine';\nimport scenes from '@/scenes';\n\nVREngine({\n  basename: __BASENAME__,\n  mount: document.getElementById('mount'),\n  scenes,\n});\n"],"sourceRoot":""}