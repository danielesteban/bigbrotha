{"version":3,"sources":["webpack:///./src/services/face_detector_model.weights","webpack:///./src/sounds/dark.ogg","webpack:///./src/meshes/sign.js","webpack:///./src/meshes/walls.js","webpack:///./src/services/face.js","webpack:///./src/scenes/index.js","webpack:///./src/scenes/level1.js","webpack:///./src/index.js"],"names":["module","exports","__webpack_require__","p","Sign","ui","_this","_classCallCheck","this","supportGeometry","geometry","BoxGeometry","faces","forEach","face","i","color","offsetHSL","Math","random","copy","translate","BufferGeometry","fromGeometry","supportMaterial","MeshBasicMaterial","vertexColors","VertexColors","_possibleConstructorReturn","_getPrototypeOf","call","panel","UI","position","y","support","Mesh","add","intersects","Object3D","Walls","walls_classCallCheck","Color","walls_possibleConstructorReturn","walls_getPrototypeOf","generator","_ref","x","z","bump","size","setHex","r","g","b","scale","set","multiply","Voxels","Face","face_classCallCheck","video","document","createElement","onloadedmetadata","isReady","options","TinyFaceDetectorOptions","loadModel","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","play","bind","_this2","fetchNetWeights","TinyFaceDetectorModel","model","nets","tinyFaceDetector","load","display","tint","detectSingleFace","result","box","sx","max","width","sy","height","sw","min","videoHeight","sh","w","renderer","h","context","drawImage","fillStyle","fillRect","texture","needsUpdate","scenes","path","scene","Level1","args","_this$intersects","level1_classCallCheck","level1_getPrototypeOf","engine","setAmbientSounds","DarkAmbient","setBackgroundColor","camera","fov","updateProjectionMatrix","lookAt","room","walls","platform","light","floor","voxelsTexture","push","_ref2","_floor$position","Floor","apply","_toConsumableArray","material","visible","sign","buttons","label","onPointer","graphics","_ref3","ctx","l","concat","beginPath","arc","PI","fill","styles","button","background","displays","distance","_loop","pivot","labels","text","s","stepX","stepY","rotation","order","onBeforeRender","_ref4","time","animation","sin","yaw","pitch","cos","displayIndex","sort","renderFace","level1_assertThisInitialized","Scene","length","render","renderFaceTimeout","setTimeout","_get","prototype","clearTimeout","VREngine","basename","__BASENAME__","mount","getElementById"],"mappings":"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","file":"code/main.b268bdb4e4d386ecc528.js","sourcesContent":["module.exports = __webpack_public_path__ + \"assets/93127487a737311625b8f17799c01111.weights\";","module.exports = __webpack_public_path__ + \"assets/4ba312eae62dae3b218b93b9b0ed4b21.ogg\";","import {\n  BoxGeometry,\n  BufferGeometry,\n  Mesh,\n  MeshBasicMaterial,\n  Object3D,\n  VertexColors,\n} from 'three';\nimport { UI } from 'vrengine';\n\nclass Sign extends Object3D {\n  constructor(ui) {\n    if (!Sign.supportGeometry) {\n      const geometry = new BoxGeometry(0.1, 2, 0.05, 1, 1, 1);\n      geometry.faces.forEach((face, i) => {\n        if (i % 2 === 1) {\n          face.color.offsetHSL(0, 0, Math.random() * -0.1);\n          geometry.faces[i - 1].color.copy(face.color);\n        }\n      });\n      geometry.translate(0, 0.3, 0);\n      Sign.supportGeometry = (new BufferGeometry()).fromGeometry(geometry);\n    }\n    if (!Sign.supportMaterial) {\n      Sign.supportMaterial = new MeshBasicMaterial({\n        color: 0x333333,\n        vertexColors: VertexColors,\n      });\n    }\n    super();\n    const panel = new UI(ui);\n    panel.position.y += 1.48;\n    const support = new Mesh(\n      Sign.supportGeometry,\n      Sign.supportMaterial\n    );\n    this.add(panel);\n    this.add(support);\n    this.intersects = [panel, support];\n  }\n}\n\nexport default Sign;\n","import { Color } from 'three';\nimport { Voxels } from 'vrengine';\n\nclass Walls extends Voxels {\n  constructor() {\n    const size = 32;\n    const radius = size * 0.5;\n    const color = new Color();\n    super({\n      generator: ({ x, y, z }) => {\n        const bump = Math.random() >= 0.5;\n        if (\n          x === 0\n          || (x === 1 && bump)\n          || x === size - 1\n          || (x === size - 2 && bump)\n          || z === 0\n          || (z === 1 && bump)\n          || z === size - 1\n          || (z === size - 2 && bump)\n          || y === size - 1\n        ) {\n          color\n            .setHex(0x333333)\n            .offsetHSL(\n              Math.random() * 0.2 - 0.2,\n              Math.random() * 0.2 - 0.2,\n              Math.random() * 0.2 - 0.2\n            );\n          return (\n            (0x01 << 24)\n            | (((color.r * 0xFF) & 0xFF) << 16)\n            | (((color.g * 0xFF) & 0xFF) << 8)\n            | ((color.b * 0xFF) & 0xFF)\n          );\n        }\n        return 0x00;\n      },\n      size,\n    });\n    this.scale.set(5, 10, 5);\n    this.position.set(-radius, -radius, -radius).multiply(this.scale);\n  }\n}\n\nexport default Walls;\n","import {\n  detectSingleFace,\n  nets,\n  fetchNetWeights,\n  TinyFaceDetectorOptions,\n} from 'face-api.js';\nimport TinyFaceDetectorModel from './face_detector_model.weights';\n\nclass Face {\n  constructor() {\n    this.video = document.createElement('video');\n    this.video.onloadedmetadata = () => {\n      this.isReady = true;\n    };\n    this.options = new TinyFaceDetectorOptions();\n    this.loadModel();\n  }\n\n  getUserMedia() {\n    const { video } = this;\n    return navigator.mediaDevices\n      .getUserMedia({ video: true, audio: false })\n      .then((stream) => {\n        video.srcObject = stream;\n        video.play();\n      })\n      .catch(this.getUserMedia.bind(this));\n  }\n\n  loadModel() {\n    return fetchNetWeights(TinyFaceDetectorModel)\n      .then(model => (\n        nets.tinyFaceDetector\n          .load(model)\n          .then(this.getUserMedia.bind(this))\n      ));\n  }\n\n  render({ display, tint }) {\n    const { options, video } = this;\n    return detectSingleFace(video, options)\n      .then((result) => {\n        if (result) {\n          const { box } = result;\n          const sx = Math.max(box.x - box.width * 0.25, 0);\n          const sy = Math.max(box.y - box.height * 0.25, 0);\n          const sw = Math.min(box.width * 1.5, video.videoHeight - sx);\n          const sh = Math.min(box.height * 1.5, video.videoHeight - sy);\n          let x = 0;\n          let y = 0;\n          let w = display.renderer.width;\n          let h = display.renderer.height;\n          if (sw < sh) {\n            h = sh * w / sw;\n            y = display.renderer.height * 0.5 - h * 0.5;\n          } else {\n            w = sw * h / sh;\n            x = display.renderer.width * 0.5 - w * 0.5;\n          }\n          display.context.drawImage(\n            video,\n            sx, sy, sw, sh,\n            x, y, w, h\n          );\n          if (tint) {\n            display.context.fillStyle = tint;\n            display.context.fillRect(0, 0, display.renderer.width, display.renderer.height);\n          }\n          display.texture.needsUpdate = true;\n        }\n      });\n  }\n}\n\nexport default new Face();\n","import Level1 from './level1';\n\nexport default [\n  {\n    path: '/',\n    scene: Level1,\n  },\n];\n","import { Object3D } from 'three';\nimport {\n  Scene,\n  Floor,\n  Voxels,\n  UI,\n} from 'vrengine';\nimport { Sign, Walls } from '@/meshes';\nimport Face from '@/services/face';\nimport DarkAmbient from '@/sounds/dark.ogg';\n\nclass Level1 extends Scene {\n  constructor(args) {\n    super(args);\n    const { engine } = args;\n\n    engine.setAmbientSounds([DarkAmbient]);\n    engine.setBackgroundColor(0x101020);\n\n    engine.camera.fov = 75;\n    engine.camera.updateProjectionMatrix();\n    engine.camera.lookAt(0, 1.8275, -1);\n    engine.camera.room.position.set(0, 0.5, -1);\n    // engine.camera.debug.active = true;\n\n    // Spawn some huge walls\n    const walls = new Walls();\n    this.add(walls);\n\n    // Spawn a platform\n    {\n      const size = 16;\n      const platform = new Voxels({\n        generator: ({ x, y, z }) => {\n          if (\n            y === 0\n            || (\n              (\n                x >= 7 && x <= 8\n              )\n              && (\n                (\n                  y < 3 && z >= 6 && z <= 7\n                )\n                || (\n                  y < 2 && z >= 8 && z <= 9\n                )\n              )\n            )\n          ) {\n            const light = (1 - Math.random() * 0.6) * 0x1A;\n            return (\n              (0x03 << 24)\n              | (Math.floor(light * 0.5) << 16)\n              | (Math.floor(light * 0.5) << 8)\n              | light\n            );\n          }\n          return 0x00;\n        },\n        size,\n        texture: this.voxelsTexture,\n      });\n      platform.scale.set(1, 0.5, 1);\n      platform.position.set(size * -0.5, -1, size * -0.5);\n      this.add(platform);\n      this.intersects.push(platform);\n      [\n        {\n          position: [0, -0.5, 0],\n          width: size,\n          height: size,\n        },\n        {\n          position: [0, 0, 1],\n          width: 2,\n          height: 2,\n        },\n        {\n          position: [0, 0.5, -1],\n          width: 2,\n          height: 2,\n        },\n      ].forEach(({ position, width, height }) => {\n        const floor = new Floor({\n          width,\n          height,\n        });\n        floor.position.set(...position);\n        floor.material.visible = false;\n        floor.position.y += 0.001;\n        this.add(floor);\n        this.intersects.push(floor);\n      });\n    }\n\n    // Spawn a sign\n    const sign = new Sign({\n      buttons: [\n        {\n          label: 'Big brotha',\n          x: 128 - 110,\n          y: 128 - 25,\n          width: 220,\n          height: 50,\n          onPointer: () => {},\n        },\n      ],\n      graphics: [\n        ({ ctx }) => {\n          for (let i = 0; i < 128; i += 1) {\n            const x = Math.random() * 256;\n            const y = Math.random() * 256;\n            const l = (Math.random() * 0.3 + 0.5) * 0x100;\n            ctx.fillStyle = `rgba(${l}, ${l}, ${l}, .5)`;\n            ctx.beginPath();\n            ctx.arc(x, y, Math.random() * 5 + 1, 0, Math.PI * 2);\n            ctx.fill();\n          }\n        },\n      ],\n      styles: {\n        button: {\n          background: '#393',\n        },\n      },\n    });\n    sign.position.set(2.5, -0.25, -2.5);\n    sign.lookAt(0, 1.25, 0);\n    this.add(sign);\n    this.intersects.push(...sign.intersects);\n\n    // Spawn a bunch of screens\n    this.displays = [];\n    for (let y = 0; y < 6; y += 1) {\n      const distance = 7 + y * 0.5;\n      for (let x = 0; x < 10; x += 1) {\n        const pivot = new Object3D();\n        const display = new UI({\n          labels: [{\n            x: 128,\n            y: 128,\n            color: 'rgba(255, 255, 255, 0.25)',\n            text: 'NO SIGNAL',\n          }],\n          width: 1,\n          height: 1,\n        });\n        const s = 0.8 + Math.random() * 0.15;\n        display.scale.set(s, s, s);\n        this.displays.push(display);\n        const stepX = Math.random() + 0.5;\n        const stepY = Math.random() + 0.5;\n        display.rotation.order = 'YXZ';\n        display.onBeforeRender = ({ animation: { time } }) => {\n          display.rotation.x = Math.sin(time * stepX) * 0.2;\n          display.rotation.y = Math.sin(time * stepY) * 0.2;\n        };\n        pivot.add(display);\n        const yaw = Math.PI + ((x - 4.5) / 11) * Math.PI * 0.5;\n        const pitch = ((y + 1.5) / 7) * Math.PI * 0.25;\n        pivot.position.set(\n          distance * Math.sin(yaw) * Math.cos(pitch),\n          distance * Math.sin(pitch),\n          distance * Math.cos(yaw) * Math.cos(pitch)\n        );\n        pivot.lookAt(0, 3, 0);\n        this.add(pivot);\n      }\n    }\n\n    this.displayIndex = 0;\n    this.displays.sort(() => Math.random() - 0.5);\n    this.renderFace = this.renderFace.bind(this);\n    this.renderFace();\n  }\n\n  renderFace() {\n    const {\n      displays,\n      displayIndex,\n    } = this;\n    if (!Face.isReady) {\n      this.renderFaceTimeout = setTimeout(this.renderFace);\n      return;\n    }\n    const display = displays[displayIndex];\n    this.displayIndex += 1;\n    if (this.displayIndex >= displays.length) {\n      this.displayIndex = 0;\n      displays.sort(() => Math.random() - 0.5);\n    }\n    Face\n      .render({\n        display,\n        tint: 'rgba(16, 16, 32, 0.5)',\n      })\n      .then(() => {\n        this.renderFaceTimeout = setTimeout(this.renderFace);\n      });\n  }\n\n  dispose() {\n    super.dispose();\n    clearTimeout(this.renderFaceTimeout);\n  }\n}\n\nexport default Level1;\n","import VREngine from 'vrengine';\nimport scenes from '@/scenes';\n\nVREngine({\n  basename: __BASENAME__,\n  mount: document.getElementById('mount'),\n  scenes,\n});\n"],"sourceRoot":""}