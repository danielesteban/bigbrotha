{"version":3,"sources":["webpack:///./src/sounds/dark.ogg","webpack:///./src/weights/tiny_face_detector_model.weights","webpack:///./src/meshes/sign.js","webpack:///./src/meshes/walls.js","webpack:///./src/scenes/index.js","webpack:///./src/scenes/level1.js","webpack:///./src/index.js"],"names":["module","exports","__webpack_require__","p","Sign","ui","_this","_classCallCheck","this","supportGeometry","geometry","BoxGeometry","faces","forEach","face","i","color","offsetHSL","Math","random","copy","translate","BufferGeometry","fromGeometry","supportMaterial","MeshBasicMaterial","vertexColors","VertexColors","_possibleConstructorReturn","_getPrototypeOf","call","panel","UI","position","y","support","Mesh","add","intersects","Object3D","Walls","walls_classCallCheck","Color","walls_possibleConstructorReturn","walls_getPrototypeOf","generator","_ref","x","z","bump","size","setHex","r","g","b","scale","set","multiply","Voxels","scenes","path","scene","Level1","args","_this$intersects","level1_classCallCheck","level1_possibleConstructorReturn","level1_getPrototypeOf","engine","setAmbientSounds","DarkAmbient","setBackgroundColor","camera","fov","updateProjectionMatrix","lookAt","walls","platform","light","floor","texture","voxelsTexture","push","ground","Floor","width","height","material","visible","sign","buttons","label","onPointer","graphics","_ref2","ctx","l","fillStyle","concat","beginPath","arc","PI","fill","styles","button","background","apply","_toConsumableArray","displays","_loop","display","stepY","onBeforeRender","_ref3","time","animation","rotation","sin","sort","displayIndex","video","document","createElement","options","TinyFaceDetectorOptions","onloadedmetadata","detectFace","detectSingleFace","then","result","box","length","sx","max","sy","sw","min","videoHeight","sh","w","renderer","h","context","drawImage","needsUpdate","timeout","setTimeout","fetchNetWeights","TinyFaceDetectorModel","model","nets","tinyFaceDetector","load","navigator","mediaDevices","getUserMedia","audio","stream","srcObject","play","Scene","_get","prototype","getTracks","track","stop","clearTimeout","VREngine","basename","__BASENAME__","mount","getElementById"],"mappings":"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","file":"code/main.03f6f6c5ae4580aca7fe.js","sourcesContent":["module.exports = __webpack_public_path__ + \"assets/4ba312eae62dae3b218b93b9b0ed4b21.ogg\";","module.exports = __webpack_public_path__ + \"assets/93127487a737311625b8f17799c01111.weights\";","import {\n  BoxGeometry,\n  BufferGeometry,\n  Mesh,\n  MeshBasicMaterial,\n  Object3D,\n  VertexColors,\n} from 'three';\nimport { UI } from 'vrengine';\n\nclass Sign extends Object3D {\n  constructor(ui) {\n    if (!Sign.supportGeometry) {\n      const geometry = new BoxGeometry(0.1, 2, 0.05, 1, 1, 1);\n      geometry.faces.forEach((face, i) => {\n        if (i % 2 === 1) {\n          face.color.offsetHSL(0, 0, Math.random() * -0.1);\n          geometry.faces[i - 1].color.copy(face.color);\n        }\n      });\n      geometry.translate(0, 0.3, 0);\n      Sign.supportGeometry = (new BufferGeometry()).fromGeometry(geometry);\n    }\n    if (!Sign.supportMaterial) {\n      Sign.supportMaterial = new MeshBasicMaterial({\n        color: 0x333333,\n        vertexColors: VertexColors,\n      });\n    }\n    super();\n    const panel = new UI(ui);\n    panel.position.y += 1.48;\n    const support = new Mesh(\n      Sign.supportGeometry,\n      Sign.supportMaterial\n    );\n    this.add(panel);\n    this.add(support);\n    this.intersects = [panel, support];\n  }\n}\n\nexport default Sign;\n","import { Color } from 'three';\nimport { Voxels } from 'vrengine';\n\nclass Walls extends Voxels {\n  constructor() {\n    const size = 32;\n    const radius = size * 0.5;\n    const color = new Color();\n    super({\n      generator: ({ x, y, z }) => {\n        const bump = Math.random() >= 0.5;\n        if (\n          x === 0\n          || (x === 1 && bump)\n          || x === size - 1\n          || (x === size - 2 && bump)\n          || z === 0\n          || (z === 1 && bump)\n          || z === size - 1\n          || (z === size - 2 && bump)\n          || y === size - 1\n        ) {\n          color\n            .setHex(0x333333)\n            .offsetHSL(\n              Math.random() * 0.2 - 0.2,\n              Math.random() * 0.2 - 0.2,\n              Math.random() * 0.2 - 0.2\n            );\n          return (\n            (0x01 << 24)\n            | (((color.r * 0xFF) & 0xFF) << 16)\n            | (((color.g * 0xFF) & 0xFF) << 8)\n            | ((color.b * 0xFF) & 0xFF)\n          );\n        }\n        return 0x00;\n      },\n      size,\n    });\n    this.scale.set(5, 10, 5);\n    this.position.set(-radius, -radius, -radius).multiply(this.scale);\n  }\n}\n\nexport default Walls;\n","import Level1 from './level1';\n\nexport default [\n  {\n    path: '/',\n    scene: Level1,\n  },\n];\n","import {\n  detectSingleFace,\n  nets,\n  fetchNetWeights,\n  TinyFaceDetectorOptions,\n} from 'face-api.js';\nimport {\n  Scene,\n  Floor,\n  Voxels,\n  UI,\n} from 'vrengine';\nimport { Sign, Walls } from '@/meshes';\nimport TinyFaceDetectorModel from '@/weights/tiny_face_detector_model.weights';\nimport DarkAmbient from '@/sounds/dark.ogg';\n\nclass Level1 extends Scene {\n  constructor(args) {\n    super(args);\n    const { engine } = args;\n\n    engine.setAmbientSounds([DarkAmbient]);\n    engine.setBackgroundColor(0x330000);\n\n    engine.camera.fov = 75;\n    engine.camera.updateProjectionMatrix();\n    engine.camera.lookAt(0, 2, -1);\n\n    // Spawn some huge walls\n    const walls = new Walls();\n    this.add(walls);\n\n    // Spawn a platform\n    {\n      const size = 16;\n      const platform = new Voxels({\n        generator: ({ y }) => {\n          if (\n            y === 0\n          ) {\n            const light = (1 - Math.random() * 0.6) * 0x33;\n            return (\n              (0x03 << 24)\n              | (light << 16)\n              | (Math.floor(light * 0.25) << 8)\n              | Math.floor(light * 0.25)\n            );\n          }\n          return 0x00;\n        },\n        size,\n        texture: this.voxelsTexture,\n      });\n      platform.position.set(size * -0.5, -1, size * -0.5);\n      this.add(platform);\n      this.intersects.push(platform);\n\n      const ground = new Floor({\n        width: size,\n        height: size,\n      });\n      ground.material.visible = false;\n      ground.position.y += 0.001;\n      this.add(ground);\n      this.intersects.push(ground);\n    }\n\n    // Spawn a sign\n    const sign = new Sign({\n      buttons: [\n        {\n          label: 'Big brotha',\n          x: 128 - 110,\n          y: 128 - 25,\n          width: 220,\n          height: 50,\n          onPointer: () => {},\n        },\n      ],\n      graphics: [\n        ({ ctx }) => {\n          for (let i = 0; i < 128; i += 1) {\n            const x = Math.random() * 256;\n            const y = Math.random() * 256;\n            const l = (Math.random() * 0.3 + 0.5) * 0x100;\n            ctx.fillStyle = `rgba(${l}, ${l}, ${l}, .5)`;\n            ctx.beginPath();\n            ctx.arc(x, y, Math.random() * 5 + 1, 0, Math.PI * 2);\n            ctx.fill();\n          }\n        },\n      ],\n      styles: {\n        button: {\n          background: '#393',\n        },\n      },\n    });\n    sign.position.set(2.5, -0.25, -2.5);\n    sign.lookAt(0, 1.25, 0);\n    this.add(sign);\n    this.intersects.push(...sign.intersects);\n\n    // Spawn a bunch of screens\n    const displays = [];\n    for (let y = 0; y < 8; y += 1) {\n      for (let x = 0; x < 8; x += 1) {\n        const display = new UI({\n          width: 1,\n          height: 1,\n          styles: {\n            background: '#330000',\n          },\n        });\n        display.position.set(x - 3.5, y + 1, -5);\n        displays.push(display);\n        const stepY = Math.random() + 0.5;\n        display.onBeforeRender = ({ animation: { time } }) => {\n          display.rotation.y = Math.sin(time * stepY) * 0.25;\n        };\n        this.add(display);\n      }\n    }\n    displays.sort(() => Math.random() - 0.5);\n\n    let displayIndex = 0;\n    const video = document.createElement('video');\n    const options = new TinyFaceDetectorOptions();\n    const detectFace = () => {\n      detectSingleFace(video, options)\n        .then((result) => {\n          if (result) {\n            const { box } = result;\n            const display = displays[displayIndex];\n            displayIndex += 1;\n            if (displayIndex >= displays.length) {\n              displays.sort(() => Math.random() - 0.5);\n              displayIndex = 0;\n            }\n            const sx = Math.max(box.x - box.width * 0.25, 0);\n            const sy = Math.max(box.y - box.height * 0.25, 0);\n            const sw = Math.min(box.width * 1.5, video.videoHeight - sx);\n            const sh = Math.min(box.height * 1.5, video.videoHeight - sy);\n            let x = 0;\n            let y = 0;\n            let w = display.renderer.width;\n            let h = display.renderer.height;\n            if (sw < sh) {\n              h = sh * w / sw;\n              y = display.renderer.height * 0.5 - h * 0.5;\n            } else {\n              w = sw * h / sh;\n              x = display.renderer.width * 0.5 - w * 0.5;\n            }\n            display.context.drawImage(\n              video,\n              sx, sy, sw, sh,\n              x, y, w, h\n            );\n            display.texture.needsUpdate = true;\n          }\n          this.timeout = setTimeout(detectFace);\n        });\n    };\n    video.onloadedmetadata = detectFace;\n\n    fetchNetWeights(TinyFaceDetectorModel)\n      .then((model) => {\n        nets.tinyFaceDetector.load(model).then(() => {\n          navigator.mediaDevices.getUserMedia({ video: true, audio: false })\n            .then((stream) => {\n              video.srcObject = stream;\n              video.play();\n              this.stream = stream;\n            });\n        });\n      });\n  }\n\n  dispose() {\n    super.dispose();\n    if (this.stream) {\n      this.stream.getTracks().forEach(track => (\n        track.stop()\n      ));\n    }\n    clearTimeout(this.timeout);\n  }\n}\n\nexport default Level1;\n","import VREngine from 'vrengine';\nimport scenes from '@/scenes';\n\nVREngine({\n  basename: __BASENAME__,\n  mount: document.getElementById('mount'),\n  scenes,\n});\n"],"sourceRoot":""}